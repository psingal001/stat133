square <- function(x){
return(x^2)
}
sapply(example, square)
example <- data.frame(1:10)
example
example <- data.frame(1:5, 6:10)
example
sapply(example, SUM)
sapply(example, sum)
?t
?lapply
?rnorm
load("C:/Users/Pranay/src/stat133/midterm1/KaiserBabies.rda")
load("C:/Users/Pranay/src/stat133/midterm1/KaiserBabies.rda")
load("C:/Users/Pranay/src/stat133/midterm1/KaiserBabies.rda")
View(infants)
mean.bwt <- mean(infants$bwt)
sd.bwt <- sd(infants$bwt)
std.bwts <- (infants$bwt - mean.bwt) / sd.bwt
subset.nonsmoke <- infants[infants$smoke == "Never"]
subset.nonsmoke <- infants[infants$smoke == "Never",]
View(subset.nonsmoke)
subset.smoke <- infants[infants$smoke == "Now",]
subset.smoke.age <- subset.nonsmoke$age
subset.smoke.age
subset.smoke.age <- subset.smoke$age
subset.nonsmoke.age <- subset.nonsmoke$age
?append
gestByAge <- function(age.cutoff, ages, gestation){
# your code here
gestation.vals <- c()
for (i in length(age)){
if (age[i] < age.cutoff){
gestation.vals <- append(gestation.vals, gestation[i])
}
}
avg.gestation <- mean()
return (avg.gestation)
}
?plot
plot(infants$gestation, infants$bwt, type = "p", xlab = "Birthweight v gestation")
plot(infants$gestation, infants$bwt, type = "p", main = "Birthweight v gestation")
plot(infants$gestation, infants$bwt, type = "p", main = "Birthweight v gestation",
col = ifelse(infants$smoke == "Never", "red", "black"))
plot(infants$gestation, infants$bwt, type = "p", main = "Birthweight v gestation",
col = ifelse(infants$smoke == "Never", "red", ifelse(infants$smoke == "Now", "blue", "black")))
plot(infants$gestation, infants$bwt, type = "p", main = "Birthweight v gestation",
col = ifelse(infants$smoke == "Never", "red", ifelse(infants$smoke == "Now", "blue", "green")))
?%
example <- c(c(1:4), c(1:5), c(1:6))
example
example
example <- list(c(1:4), c(1:5), c(1:6))
example
example[1]
length(example[1])
length(example[[1]])
length(example[[3]])
listLengths <- function(data.list) {
# your code here
element.lengths <- c()
for (i in length(data.list)){
element.lengths <- append(element.lengths, length(data.list[[i]]))
}
return (element.lengths)
}
listLengths(example)
length(example)
listLengths <- function(data.list) {
# your code here
element.lengths <- c()
for (i in 1:length(data.list)){
element.lengths <- append(element.lengths, length(data.list[[i]]))
}
return (element.lengths)
}
listLengths(example)
?apply
load("C:/Users/Pranay/src/stat133/midterm2/Cache500.rda")
load("C:/Users/Pranay/src/stat133/midterm2/Cache500.rda")
load("C:/Users/Pranay/src/stat133/midterm2/family.rda")
load("C:/Users/Pranay/src/stat133/midterm2/KaiserBabies.rda")
x <- seq(6, 6000, by = 6)
length(x)
?rep
w <- rep(1:13, 4)
q
w
random(w)
?rand
?sample
w <- sample(rep(1:13, 4), 52)
w
?rexp
m <- matrix(rexp(100, rate = 3), nrow = 10, ncol = 10)
m
?rpois
l <- lapply(1:12, rpois, 100, lambda = 5)
l <- lapply(1:12, rpois(100, lambda = 5))
l <- lapply(1:12, rpois, lambda = 5)
l
?table
View(infants)
t <- table(infants$ed, exclude = (infants != "Married"))
t
test <- table(infants$ed)
test
t <- table(infants$ed, exclude = ((infants$marital != "Married"))
)
t
t <- table(infants$ed, exclude = ((infants$marital != "Married") & (infants$parital != 1)))
t
test
t <- table(infants$ed[(infants$marital == "Married") & (infants$parity=1), ])
infants$ed[(infants$marital == "Married") & (infants$parity=1), ]
infants[(infants$marital == "Married") & (infants$parity=1), ]
subset.infant <- infants[(infants$marital == "Married") & (infants$parity=1), ]
t <- table(subset.infant$ed)
t
test
mw <- mean(infants$bwt[infants$gestation >= 259])
infants$bwt[infants$gestation >= 259]
?mean
mw <- mean(infants$bwt[infants$gestation >= 259], na.rm = TRUE)
mw
mw <- mean(infants$bwt[infants$gestation >= 259])
mw
mw <- mean(infants$bwt[infants$gestation >= 259], na.rm = TRUE)
mw
View(family)
f <- family[(family$gender = 'f') & (family$age > 50),]
f <- family[(family$gender == 'f') & (family$age > 50),]
f
?subset
f <- family[(family$gender == 'f'),]
f
family
load("C:/Users/Pranay/src/stat133/midterm2/family.rda")
family
f <- subset(family, family$gender == 'f', family$age > 50)
f <- family[family$gender == 'f' & family$age > 50, ]
f
f1 <- family[family$gender == 'f' & family$age > 50, ]
f2 <- family[family$gender == 'm' & family$height > (6*12), ]
f2
f2 <- family[family$gender == 'm' & family$height >= (6*12), ]
f2
example <- "hello"
example[1]
example[[1]]
example <- "hello"
example[[1]]
f3 <- family[family$name == "T"]
f3 <- family[family$name == "T",]
f3
?start
?first
f4 <- family[family$age == min(family$age),]
f4
iris
?plot
?boxplot
head(iris)
boxplot(iris$Sepal.Length, iris$Species)
plot(iris$Petal.Length, iris$Petal.Width)
plot(iris$Petal.Length, iris$Petal.Width, xlab = "Petal Length", ylab = "Petal Width")
plot(iris$Petal.Length, iris$Petal.Width, xlab = "Petal Length", ylab = "Petal Width",
col = iris$Species)
boxplot(iris$Sepal.Length, iris$Species)
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Length, subset = iris$Species)
plot(iris$Sepal.Length/iris$Petal.Length, col = iris$Species)
load("C:/Users/Pranay/src/stat133/midterm2/Cache500.rda")
first.cache <- sapply(Cache500, function(x){return(x[[1]])})
x <- list(c(1:4), c(1:5), c(1:6))
x
sapply(x, sum)
sapply(x, [[1]])
sapply(x, first<- function(x){return[[1]]})
sapply(x, first<- function(x){return(x[[1]])})
x <- list(c(4:9), c(1:5), c(1:6))
sapply(x, first<- function(x){return(x[[1]])})
first.cache <- sapply(Cache500, first<- function(x){return(x[[1]])})
Cache500
first.cache <- sapply(Cache500, first<- function(x){return(x[[1]])})
mean.cache <- sapply(Cache500, mean)
mean.cacher
mean.cache
mean.cache <- sapply(Cache500, mean, na.rm = TRUE)
mean.cache
?mean
Cache500
mean.cache
mean.cache <- sapply(Cache500, mean)
sd.cache <- sapply(Cache500, sd)
mean.long.cache <- sapply(Cache500, ifelse(length(Cache500[[i]]) > 50, mean, NA))
x <- seq(6, 12000, by = 6)
test2 % 10
test2 <- 13
test2 % 10
13 % 10
13 %/% 10
13 %% 10
y <- ifelse(x%%10 == 0, T, F)
x <- seq(6, 12000, by = 6)
y <- ifelse(x%%10 == 0, T, F)
head(x)
head(x)[1]
test5 <- "hello"
head(test5)[1]
?list
?rep
?rpois
rpois(5, 5)
rpois(5, 5)
rpois(5, 5)
mean(rpois(5, 5))
mean(rpois(5, 5))
mean(rpois(5, 5))
mean(rpois(5, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
mean(rpois(100, 5))
l <- list(rep(rpois(100, 5), 12))
l
length(l[[1]])
l <- list(rpois(100, 5), rpois(100, 5))
set.seed(71)
l <- list(rpois(100, 5), rpois(100, 5))
l <- list(rpois(100, 5), rpois(100, 5), rpois(100, 5), rpois(100, 5),
rpois(100, 5), rpois(100, 5), rpois(100, 5), rpois(100, 5),
rpois(100, 5), rpois(100, 5), rpois(100, 5), rpois(100, 5))
substr("hello")
substr("hello", start = 1)
test5
test5.pop[1]
substring(test5, 1, 1)
f3 <- family[substring(family$name, 1, 1) == "T",]
?substring
f3 <- family[substr(family$name, 1, 1) == "T",]
f3 <- family[sapply(family$name, substr, start = 1, stop = 1) == "T",]
boxplot
?boxplot
boxplot(iris$Sepal.Length, iris$Species)
plot(iris$Petal.Length, iris$Petal.Width, xlab = "Petal Length", ylab = "Petal Width",
col = iris$Species)
?start
?head
first.cache <- sapply(Cache500, head, n = 1)
first.cache
Cache500[477][1]
Cache500[477][[1]]
iris$Species
boxplot(iris$Sepal.Length[iris$Species = "setosa"],
iris$Sepal.Length[iris$Species = "versicolor"],
iris$Sepal.Length[iris$Species = "virginica"])
boxplot(iris$Sepal.Length[iris$Species == "setosa"],
iris$Sepal.Length[iris$Species == "versicolor"],
iris$Sepal.Length[iris$Species == "virginica"])
?list
?rep
test3 <- replicate(n = 12, expr = rpois(100, 5))
View(test3)
test3 <- list(replicate(n = 12, expr = rpois(100, 5)))
test3 <- replicate(n = 12, expr = rpois(100, 5), simplify = "list")
test3 <- replicate(n = 12, expr = rpois(100, 5), simplify = "list")
class(test3)
?list
load("C:/Users/Pranay/src/stat133/midterm2/Cache500.rda")
?apply
mean.long.cache <- sapply(Cache500, test_function <- function(x){if(length(x) > 50){return(mean(x))}
else{return(NA)}})
mean.long.cache
mean.long.cache <- sapply(Cache500, mean.long.function <- function(x){if(length(x) > 50){return(mean(x))}
else{return(NA)}})
mean.long.cache <- sapply(Cache500, mean.long.function <- function(x){if(length(x) > 50){return(mean(x))}else{return(NA)}})
library("SnowballC")
install.packages("SnowballC")
library("SnowballC")
library("SnowballC")
setwd("C:/Users/Pranay/src/stat133/hw7")
source("computeSJDistance.R")
speeches <- readLines(con=file("stateoftheunion1790-2012.txt"))
breaks <- grep("***", speeches, fixed = TRUE)
n.speeches <- length(breaks) - 1
presidents = speeches[breaks+3][-length(breaks)]
presidents
presidents <- speeches[breaks+3][-length(breaks)]
tempDates <- speeches[breaks+4][-length(breaks)]
tempDates
?gregexp
?gregexpr
?head
head(speeches, n = 20)
speeches
?substr
?unlist
yrLocs <- gregexpr("[[:digit:]][[:digit:]][[:digit:]]+" , tempDates)
yrLocs
speechYr <- as.numeric(substr(tempDates,unlist(yrLocs),unlist(yrLocs)+3))
speechYr
tempDates
MonthLocs <- gregexpr("[[:digit:]]" , tempDates)
speechMo <- as.numeric(substr(tempDates,unlist(MonthLocs),unlist(yrLocs)+3))
speechMo <- as.numeric(substr(tempDates,unlist(MonthLocs),unlist(yrLocs)+1))
speechMp
speechMo
MonthLocs <- gsub( "[[:digit:] ,]","" , tempDates)
speechMo <- as.numeric(substr(tempDates,unlist(MonthLocs),unlist(yrLocs)+1))
speechMo <- substr(tempDates,unlist(MonthLocs),unlist(yrLocs)+1)
speechMo <- as.character(substr(tempDates,unlist(MonthLocs),unlist(yrLocs)+1))
MonthLocs
speechMo <- gsub( "[[:digit:] ,]","" , tempDates)
speechMo
speeches <- gsub("Mr.", "Mr", speeches)
speeches <- gsub("Mrs.", "Mrs", speeches)
speeches <- gsub("U.S.", "US", speeches)
speechesL <- list()
for(i in 1:n.speeches){
speechesL[[i]] = paste(speeches[(breaks[i]+6):(breaks[i+1]-2)],collapse = " ")
}
speechesL = lapply(speechesL, strsplit, split = "[\\.\\?\\!] ")
speeches:
q
speechesL
:punct:
x <- "The dog. in the park, was running!"
x[:punct:]
?str_extract
library(string)
library(stringr)
?str_extract
str_extract(x,[:punct:])
str_extract(x,"[[:punct:]]")
?str_detect
str_detect(x,"[[:punct:]]")
x[str_detect(x,"[[:punct:]]")]
str_replace(x,"[[:punct:]]", "Q")
x <- "The dog. in the park. was running."
str_replace(x,"[[:punct:]]", "Q")
gsub(x,"[[:punct:]]", "Q")
x
gsub(x,".", "Q")
x
?which
?wordStem
speechToWords <- function(sentences) {
# Input  : sentences, a character string
# Output : words, a character vector where each element is one word
# Eliminate apostrophes and numbers,
# and turn characters to lower case.
sentences <- gsub("[,'[:digit:]]","",sentences)
sentences <- tolower(sentences)
# Drop the words (Applause. and Laughter.)
sentences <- gsub("\\[Applause\\]", "", sentences)
sentences <- gsub("\\[Laughter\\]", "", sentences)
sentences <- gsub("\\\n","",sentences)
# Split the text up by blanks and punctuation  (hint: strsplit, unlist)
sentences <- unlist(strsplit(sentences, "[ [:punct:]]"))
# Drop any empty words
sentences <- sentences[-which(sentences == "")]
# Use wordStem() to stem the words
# check the output from wordStem(), do you get all valid words?  any empty ("") strings?
sentences <- wordStem(sentences)
# return a character vector of all words in the speech
return(sentences)
}
speechWords <- lapply(speechesL, speechToWords)
?unlist
?unique
?sort
uniqueWords <- sort(unlist(speechWords))
no.uniqueWords <- length(uniqueWords)
no.uniqueWords
uniqueWords <- sort(unique(unlist(speechWords)))
no.uniqueWords
no.uniqueWords <- length(uniqueWords)
no.uniqueWords
wordVecs <- lapply(speechWords, function(x){
tempVec <- emptyVec
tempVec[(sort(unique(unlist(x))))] <- table(x)
return(tempVec)
})
emptyVec = rep(0, length(uniqueWords))
names(emptyVec) = uniqueWords
no.uniqueWords
wordVecs <- lapply(speechWords, function(x){
tempVec <- emptyVec
tempVec[(sort(unique(unlist(x))))] <- table(x)
return(tempVec)
})
wordMat <- matrix(wordVecs)
wordMAt
wordMat
wordMat <- matrix(unlist(wordVecs), ncol  = length(wordVecs), byrow = FALSE)
wordMat
load("speeches_dataframe.Rda")
yr <- speechYr
month <- speechMo
words <- sapply(speechWords, length)
words
chars <- sapply(speechWords, sum(nchar))
chars <- sapply(speechWords, sum)
chars <- sapply(speechWords, function(x) {sum(nchar(x))})
chars
sentences <- sapply(speechesL, length)
View(speechesDF)
speechesDF <- cbind(speechesDF, yr, month, words, chars, sentences)
View(speechesDF)
?length
sentences <- sapply(speechesL, function(data.list) {
data.list <- sapply(data.list, length)
return(data.list)
})
sentences
speechesDF <- cbind(speechesDF, yr, month, words, chars, sentences)
View(speechesDF)
load("speeches_dataframe.Rda")
View(speechesDF)
speechesDF <- cbind(speechesDF, yr, month, words, chars, sentences)
View(speechesDF)
?t
View(wordMat)
?rowsum
presidentWordMat <- t(rowsum(t(wordMat),speechesDF$Pres))
View(presidentWordMat)
presidentWordMat <- presidentWordMat[ ,c("George Washington","John Adams","Thomas Jefferson","James Madison","James Monroe","John Quincy Adams","Andrew Jackson","Martin van Buren","John Tyler","James Polk","Zachary Taylor","Millard Fillmore","Franklin Pierce","James Buchanan","Abraham Lincoln","Andrew Johnson","Ulysses S. Grant","Rutherford B. Hayes","Chester A. Arthur","Grover Cleveland","Benjamin Harrison","William McKinley","Theodore Roosevelt","William H. Taft","Woodrow Wilson","Warren Harding","Calvin Coolidge","Herbert Hoover","Franklin D. Roosevelt","Harry S. Truman","Dwight D. Eisenhower","John F. Kennedy","Lyndon B. Johnson","Richard Nixon","Gerald R. Ford","Jimmy Carter","Ronald Reagan","George H.W. Bush","William J. Clinton","George W. Bush","Barack Obama")]
View(presidentWordMat)
docFreq <- apply(presidentWordMat, MARGIN = 1, function(x) {
sum(sapply(x, function(y){y>0}))
}
)
presDist <- computeSJDistance(terms = presidentWordMat, df = docFreq, tf = uniqueWords)
presDist <- computeSJDistance(terms = uniqueWords, df = docFreq, tf = presidentWordMat)
View(presDist)
?cmdscale
mds <- cmdscale(presDist)
plot(mds)
plot(scaled, col=mycolors[unique(data.frame(speechesDF1$Pres,speechesDF1$party))$speechesDF1.party],
pch = 19, main = "Presidents",
xlab = "", ylab = "")
plot(mds, col=mycolors[unique(data.frame(speechesDF1$Pres,speechesDF1$party))$speechesDF1.party],
pch = 19, main = "Presidents",
xlab = "", ylab = "")
plot(mds, col=unique(data.frame(speechesDF1$Pres,speechesDF1$party))$speechesDF1.party,
pch = 19, main = "Presidents",
xlab = "", ylab = "")
plot(mds, col=unique(data.frame(speechesDF$Pres,speechesDF$party))$speechesDF.party,
pch = 19, main = "Presidents",
xlab = "", ylab = "")
plot(mds, col=unique(data.frame(speechesDF$Pres,speechesDF$party))$speechesDF.party,
main = "Presidents",
xlab = "", ylab = "")
plot(mds, col=data.frame(speechesDF$Pres,speechesDF$party)$speechesDF.party,
main = "Presidents",
xlab = "", ylab = "")
plot(mds, col=unique(data.frame(speechesDF$Pres,speechesDF$party))$speechesDF.party,
main = "Presidents",
xlab = "", ylab = "")
plot(mds, col=unique(data.frame(speechesDF$Pres,speechesDF$party))$speechesDF.party,
main = "Presidents", xlab = "", ylab = "")
cols <- rainbow()
View(speechesDF)
plot(speechesDF$yr, speechesDF$sentences)
plot(speechesDF$yr, speechesDF$words)
plot(speechesDF$yr, speechesDF$chars)
plot(speechesDF$yr, speechesDF$chars)
plot(speechesDF$yr, speechesDF$char/speechesDF$words)
plot(speechesDF$yr, speechesDF$words/speechesDF$sentences)
presParty <- c(speechesDF$Pres = speechesDF$party)
presParty <- c("speechesDF$Pres" = speechesDF$party)
presParty
presParty <- c(unique(speechesDF$Pres) = speechesDF$party)
presParty <- c("unique(speechesDF$Pres)" = speechesDF$party)
presParty
?c
plot(mds, type = "n", main = "Presidents", xlab = "", ylab = "")
?text
text(labels = unique(speechesDF$Pres), col = cols[presParty[rownames(presDist)]])
text(mds, labels = unique(speechesDF$Pres), col = cols[presParty[rownames(presDist)]])
cols <- rainbow(presParty)
text(mds, labels = unique(speechesDF$Pres), col = cols[presParty[rownames(presDist)]])
presParty <- c(unique(speechesDF$Pres))
presParty
speechesDF$party
speechesDF$Pres
unique(speechesDF$Pres)
presParty <- c(unique(speechesDF$Pres))
presParty
presParty <- c(speechesDF$party)
presParty
names(presParty) <- unique(speechesDF$Pres)
presParty
?unique
presParty <- unique(speechesDF$Pres)
presParty
presParty <- c(name(unique(speechesDF$Pres)), speechesDF$party)
presParty <- c(names(unique(speechesDF$Pres)), speechesDF$party)
presParty
presParty <- (unique(speechesDF$Pres), speechesDF$party)
?rownames
names(presParty) <- unique(speechesDF$Pres)
presParty
